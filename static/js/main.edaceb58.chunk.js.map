{"version":3,"sources":["TemperatureInput.js","Calculator.js","index.js"],"names":["scaleNames","c","f","TemperatureInput","props","handleChange","bind","e","this","onTemperatureChange","target","value","temperature","scale","onChange","React","Component","BoilerVerdict","celsius","toCelsius","fahr","toFahr","tryConvert","convert","input","parseFloat","Number","isNaN","output","Math","round","toString","Calculator","handleCelsiusChange","handleFahrChange","state","setState","ReactDOM","render","document","getElementById"],"mappings":"yPAGMA,EAAa,CAClBC,EAAG,UACHC,EAAG,cAyBWC,E,kDArBd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAFF,E,gDAKnB,SAAaC,GACZC,KAAKJ,MAAMK,oBAAoBF,EAAEG,OAAOC,S,oBAGzC,WACC,IAAMC,EAAcJ,KAAKJ,MAAMQ,YACzBC,EAAQL,KAAKJ,MAAMS,MACzB,OACC,qCACC,2DAA8Bb,EAAWa,GAAzC,OACA,uBAAOF,MAAOC,EAAaE,SAAUN,KAAKH,sB,GAhBfU,IAAMC,WCJrC,SAASC,EAAcb,GACtB,OAAGA,EAAMc,SAAW,IACZ,sDAEA,0DAmDT,SAASC,EAAUC,GAClB,OAAO,EAAI,GAAKA,EAAK,IAGtB,SAASC,EAAOH,GACf,OAAkB,EAAVA,EAAc,EAAK,GAK5B,SAASI,EAAWV,EAAaW,GAChC,IAAMC,EAAQC,WAAWb,GACzB,GAAIc,OAAOC,MAAMH,GAChB,MAAO,GACR,IAAMI,EAASL,EAAQC,GAEvB,OADsBK,KAAKC,MAAe,IAATF,GAAgB,KAC5BG,WAGPC,M,kDAlEd,WAAY5B,GAAQ,IAAD,8BAClB,cAAMA,IACD6B,oBAAsB,EAAKA,oBAAoB3B,KAAzB,gBAC3B,EAAK4B,iBAAmB,EAAKA,iBAAiB5B,KAAtB,gBACxB,EAAK6B,MAAQ,CACZtB,MAAO,IACPD,YAAa,IANI,E,uDAUnB,SAAoBA,GACnBJ,KAAK4B,SAAS,CACbvB,MAAO,IACPD,kB,8BAIF,SAAiBA,GAChBJ,KAAK4B,SAAS,CACbvB,MAAO,IACPD,kB,oBAIF,WACC,IAAMC,EAAQL,KAAK2B,MAAMtB,MACnBD,EAAcJ,KAAK2B,MAAMvB,YACzBM,EAAmB,MAATL,EAAeS,EAAWV,EAAaO,GAAaP,EAC9DQ,EAAgB,MAATP,EAAeS,EAAWV,EAAaS,GAAUT,EAC9D,OACC,gCACC,cAAC,EAAD,CACCC,MAAM,IACND,YAAaM,EACbT,oBAAqBD,KAAKyB,sBAE3B,cAAC,EAAD,CACCpB,MAAM,IACND,YAAaQ,EACbX,oBAAqBD,KAAK0B,mBAE3B,cAACjB,EAAD,CAAeC,QAASO,WAAWP,Y,GA1CdH,IAAMC,WCN/BqB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.edaceb58.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst scaleNames = {\r\n\tc: 'Celsius',\r\n\tf: 'Fahrenheit',\r\n};\r\n\r\nclass TemperatureInput extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t}\r\n\r\n\thandleChange(e) {\r\n\t\tthis.props.onTemperatureChange(e.target.value);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst temperature = this.props.temperature;\r\n\t\tconst scale = this.props.scale;\r\n\t\treturn (\r\n\t\t\t<fieldset>\r\n\t\t\t\t<legend>Enter Temperature in {scaleNames[scale]}:</legend>\r\n\t\t\t\t<input value={temperature} onChange={this.handleChange} />\r\n\t\t\t</fieldset> \r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TemperatureInput;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport TemperatureInput from './TemperatureInput';\r\n\r\nfunction BoilerVerdict(props) {\r\n\tif(props.celsius >= 100)\r\n\t\treturn <p>The water would boil.</p>;\r\n\telse\r\n\t\treturn <p>The water would not boil.</p>;\r\n}\r\n\r\nclass Calculator extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.handleCelsiusChange = this.handleCelsiusChange.bind(this);\r\n\t\tthis.handleFahrChange = this.handleFahrChange.bind(this);\r\n\t\tthis.state = {\r\n\t\t\tscale: 'c',\r\n\t\t\ttemperature: '',\r\n\t\t};\r\n\t}\r\n\r\n\thandleCelsiusChange(temperature) {\r\n\t\tthis.setState({\r\n\t\t\tscale: 'c',\r\n\t\t\ttemperature\r\n\t\t});\r\n\t}\r\n\r\n\thandleFahrChange(temperature) {\r\n\t\tthis.setState({\r\n\t\t\tscale: 'f',\r\n\t\t\ttemperature\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst scale = this.state.scale;\r\n\t\tconst temperature = this.state.temperature;\r\n\t\tconst celsius = scale ==='f' ? tryConvert(temperature, toCelsius) : temperature;\r\n\t\tconst fahr = scale ==='c' ? tryConvert(temperature, toFahr) : temperature;\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<TemperatureInput\r\n\t\t\t\t\tscale=\"c\"\r\n\t\t\t\t\ttemperature={celsius}\r\n\t\t\t\t\tonTemperatureChange={this.handleCelsiusChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<TemperatureInput\r\n\t\t\t\t\tscale=\"f\"\r\n\t\t\t\t\ttemperature={fahr}\r\n\t\t\t\t\tonTemperatureChange={this.handleFahrChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<BoilerVerdict celsius={parseFloat(celsius)} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction toCelsius(fahr) {\r\n\treturn 5 / 9 * (fahr-32);\r\n}\r\n\r\nfunction toFahr(celsius) {\r\n\treturn (celsius * 9 / 5) + 32;\r\n}\r\n\r\n// takes a string temperature and a convert function as arguments\r\n// and returns converted temperature as a string or returns an empty string on an invalid temperature. \r\nfunction tryConvert(temperature, convert) {\r\n\tconst input = parseFloat(temperature);\r\n\tif (Number.isNaN(input))\r\n\t\treturn '';\r\n\tconst output = convert(input);\r\n\tconst roundedOutput = Math.round(output * 100) / 100; //round to the second decimal place\r\n\treturn roundedOutput.toString();\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Calculator from './Calculator';\r\n\r\nReactDOM.render(\r\n    <Calculator />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}